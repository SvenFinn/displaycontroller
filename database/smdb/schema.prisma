datasource db {
    provider = "mysql"
    url      = "mysql://meyton:mc4hct@192.168.10.200:3306/SMDB"
}

generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

/**
 * This is the schema for the Meyton SMDB database.
 * For ShootMaster Version 4.9.7a - 5.3.x
 * SMDB Version 62 - 64
 */

model Evaluation {
    id                    Int    @id @map("AuswertungsID")
    name                  String @map("AuswertungsName") @db.VarChar(72)
    listId                Int    @map("ListenID")
    mode                  Int    @map("AuswertungsModus")
    modeOption1           Int    @map("AuswertungsModusOption1")
    modeOption2           Int    @map("AuswertungsModusOption2")
    modeFlags             Int    @map("AuswertungsModusFlags")
    teamMode              Int    @map("MannschaftsModus")
    teamSize              Int    @map("MannschaftsGroesse")
    teamModeOption1       Int    @map("MannschaftsModusOption1")
    teamModeOption2       Int    @map("MannschaftsModusOption2")
    teamModeFlags         Int    @map("MannschaftsModusFlags")
    multipleTargets       Int    @map("MehrereScheiben")
    multipleTargetsOption String @map("MehrereScheibenOption") @db.VarChar(36)
    minTargetCount        Int    @map("Mindestscheibenzahl")
    hitEval1              Int    @map("Trefferauswertung1")
    hitEval2              Int    @map("Trefferauswertung2")
    hitsPerSeries         Int    @map("TrefferProSerie")
    tieBreak              Int    @map("Gleichstand")
    finalists             Int    @map("Finalteilnehmer")
    resultsListStart      Int    @map("ErgebnislisteVonPlatz")
    resultsListEnd        Int    @map("ErgebnislisteBisPlatz")
    hiddenStart           Int    @map("VerdecktVonPlatz")
    hiddenEnd             Int    @map("VerdecktBisPlatz")
    certificateTemplate   Int    @map("UrkundenVorlage")
    certificateStart      Int    @map("UrkundeVonPlatz")
    certificateEnd        Int    @map("UrkundeBisPlatz")
    certificateYOffset    Int    @map("UrkundeYOffset")
    htmlInterval          Int    @map("HTMLExportIntervall")
    htmlPath              String @map("HTMLExportPfad") @db.VarChar(36)

    startList            StartList             @relation(fields: [listId], references: [id], onDelete: Cascade)
    dateFilters          FilterDate[]
    disciplineFilters    FilterDiscipline[]
    birthDateFilters     FilterBirthDate[]
    genderFilters        FilterGender[]
    groupFilters         FilterGroup[]
    classFilters         FilterClass[]
    teamFilters          FilterTeam[]
    priceShootingFilters FilterPriceShooting[]
    rankListFilters      FilterRankList[]
    sqlFilters           FilterSQL?
    shooterFilters       FilterShooter[]
    rangeFilters         FilterRange[]
    startListFilters     FilterStartList[]
    startTimeFilters     FilterStartTime[]
    stateFilters         FilterState[]
    hitFilters           FilterHits[]
    unionFilters         FilterUnion[]
    clubFilters          FilterClub[]
    dayOfWeekFilters     FilterDayOfWeek[]
    timeFilters          FilterTime[]
    handiCaps            HandiCap[]
    priceLists           PriceList[]
    revisions            Revision[]
    certificateTexts     CertificateText[]

    @@unique([listId, name])
    @@map("Auswertung")
}

model District {
    id   Int    @id @map("BezirksID")
    name String @unique @map("BezirksName") @db.VarChar(36)

    @@map("Bezirk")
}

model Accounting {
    id              Int        @id @default(autoincrement()) @map("BuchungsID")
    registerId      Int        @map("KassenID")
    staffId         Int        @map("PersonalID")
    listId          Int        @map("ListenID")
    startId         Int        @map("StartID")
    classId         Int        @map("KlassenID")
    priceShootingId Int        @map("PreisscheibenID")
    type            TicketType @map("Buchungstyp")
    change          Int        @map("Aenderung")
    debit           Int        @map("Soll")
    credit          Int        @map("Haben")
    timeStamp       DateTime   @map("Zeitstempel") @db.DateTime(0)
    flags           Int        @map("BuchungsFlags")

    personal      Staff          @relation(fields: [staffId], references: [id])
    startList     StartListEntry @relation(fields: [listId, startId], references: [listId, startId])
    class         Class          @relation(fields: [classId], references: [id])
    priceShooting PriceShooting  @relation(fields: [priceShootingId], references: [id])

    @@index([classId])
    @@index([listId, startId])
    @@index([staffId])
    @@index([priceShootingId])
    @@map("Buchungen")
}

model Discipline {
    id        Int     @id @map("DzplID")
    name      String  @map("DzplName") @db.VarChar(36)
    active    Boolean @map("aktiv") @db.TinyInt
    lastRange Int     @map("Belegung") @db.SmallInt
    gauge     Int     @map("Kaliber") @db.SmallInt

    rounds            Round[]
    disciplineFilters FilterDiscipline[]
    handiCaps         HandiCap[]
    priceShootings    PriceShooting[]
    records           Record[]
    targetData        TargetData[]
    startListEntries  StartListEntry[]
    times             Zeit[]

    @@map("Disziplin")
}

model Round {
    disciplineId Int    @map("DzplID")
    id           Int    @map("StellungsIdx") @db.TinyInt
    zoom         Int    @map("Zoom") @db.TinyInt
    mode         Int    @map("Modus") @db.TinyInt
    name         String @map("DurchgangsName") @db.VarChar(36)
    layoutId     Int    @map("ScheiBesID")
    maxHits      Int    @map("MaxTrefferZahl") @db.SmallInt
    hitsPerSum   Int    @map("TrefferProSerie") @db.SmallInt
    hitsPerView  Int    @map("TrefferProScheibe") @db.SmallInt

    discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
    layout     Layout     @relation(fields: [layoutId], references: [id])

    @@id([disciplineId, id])
    @@index([layoutId])
    @@map("Durchgang")
}

model FilterDate {
    evaluationId Int      @map("AuswertungsID")
    startDate    DateTime @map("DatumStart") @db.Date
    endDate      DateTime @map("DatumEnde") @db.Date

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, startDate, endDate])
    @@map("FilterDatum")
}

model FilterDiscipline {
    evaluationId Int @map("AuswertungsID")
    disciplineId Int @map("DzplID")

    Auswertung Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    Disziplin  Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)

    @@id([evaluationId, disciplineId])
    @@index([disciplineId])
    @@map("FilterDisziplin")
}

model FilterBirthDate {
    evaluationId Int      @map("AuswertungsID")
    startDate    DateTime @map("DatumStart") @db.Date
    endDate      DateTime @map("DatumEnde") @db.Date

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, startDate, endDate])
    @@map("FilterGeburtsdatum")
}

model FilterGender {
    evaluationId Int @map("AuswertungsID")
    gender       Int @map("Geschlecht") @db.TinyInt

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, gender])
    @@map("FilterGeschlecht")
}

model FilterGroup {
    evaluationId Int @map("AuswertungsID")
    groupId      Int @map("GruppenID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@id([evaluationId, groupId])
    @@index([groupId])
    @@map("FilterGruppe")
}

model FilterClass {
    evaluationId Int @map("AuswertungsID")
    classId      Int @map("KlassenID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    Klasse     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)

    @@id([evaluationId, classId])
    @@index([classId])
    @@map("FilterKlasse")
}

model FilterTeam {
    evaluationId Int @map("AuswertungsID")
    teamId       Int @map("MannschaftsID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@id([evaluationId, teamId])
    @@index([teamId])
    @@map("FilterMannschaft")
}

model FilterPriceShooting {
    evaluationId    Int @map("AuswertungsID")
    priceShootingId Int @map("PreisscheibenID")

    evaluation    Evaluation    @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    priceShooting PriceShooting @relation(fields: [priceShootingId], references: [id], onDelete: Cascade)

    @@id([evaluationId, priceShootingId])
    @@index([priceShootingId])
}

model FilterRankList {
    evaluationId Int @map("AuswertungsID")
    rankListId   Int @map("RanglistenID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    rankList   RankList   @relation(fields: [rankListId], references: [id], onDelete: Cascade)

    @@id([evaluationId, rankListId])
    @@index([rankListId])
}

model FilterSQL {
    evaluationId Int     @id @map("AuswertungsID")
    whereClause  String? @map("WhereClause") @db.VarChar(1024)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
}

model FilterShooter {
    evaluationId Int    @map("AuswertungsID")
    shooterId    BigInt @map("SportpassID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    shooter    Shooter    @relation(fields: [shooterId], references: [id], onDelete: Cascade)

    @@id([evaluationId, shooterId])
    @@index([shooterId])
    @@map("FilterSchuetze")
}

model FilterRange {
    evaluationId Int @map("AuswertungsID")
    rangeStart   Int @map("StandbereichStart")
    rangeEnd     Int @map("StandbereichEnde")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, rangeStart, rangeEnd])
    @@map("FilterStand")
}

model FilterStartList {
    evaluationId Int @map("AuswertungsID")
    startListId  Int @map("ListenID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    startList  StartList  @relation(fields: [startListId], references: [id], onDelete: Cascade)

    @@id([evaluationId, startListId])
    @@index([startListId])
    @@map("FilterStarterliste")
}

model FilterStartTime {
    evaluationId Int      @map("AuswertungsID")
    startTime    DateTime @map("Startzeit") @db.DateTime(0)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, startTime])
    @@map("FilterStartzeit")
}

model FilterState {
    evaluationId Int @map("AuswertungsID")
    state        Int @map("StatusFlag")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, state])
    @@map("FilterStatus")
}

model FilterHits {
    evaluationId Int    @map("AuswertungsID")
    roundId      Int    @map("StellungsNr")
    type         Int    @map("FilterTyp")
    hitRange     String @map("Trefferbereich") @db.VarChar(72)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id])

    @@id([evaluationId, roundId])
    @@map("FilterTreffer")
}

model FilterUnion {
    evaluationId Int @map("AuswertungsID")
    unionId      Int @map("VerbandsID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id])
    union      Union      @relation(fields: [unionId], references: [id])

    @@id([evaluationId, unionId])
    @@map("FilterVerband")
}

model FilterClub {
    evaluationId Int @map("AuswertungsID")
    clubId       Int @map("VereinsID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id])
    club       Club       @relation(fields: [clubId], references: [id])
    Team       Team?      @relation(fields: [teamId], references: [id])
    teamId     Int?

    @@id([evaluationId, clubId])
    @@map("FilterVerein")
}

model FilterDayOfWeek {
    evaluationId Int @map("AuswertungsID")
    dayOfWeek    Int @map("WochentagsID")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id])

    @@id([evaluationId, dayOfWeek])
    @@map("FilterWochentag")
}

model FilterTime {
    evaluationId Int      @map("AuswertungsID")
    startTime    DateTime @map("ZeitStart") @db.Time
    endTime      DateTime @map("ZeitEnde") @db.Time

    evaluation Evaluation @relation(fields: [evaluationId], references: [id])

    @@id([evaluationId, startTime, endTime])
    @@map("FilterZeit")
}

model FootNote {
    id          Int    @id @map("FussnotenID")
    type        Int    @map("FussnotenTyp")
    punishment  Int    @map("FussnotenStrafe")
    short       String @map("FussnotenKuerzel") @db.VarChar(20)
    germanText  String @map("FussnotenText_de") @db.VarChar(72)
    englishText String @map("FussnotenText_en") @db.VarChar(72)
    frenchText  String @map("FussnotenText_fr") @db.VarChar(72)

    @@map("Fussnote")
}

model Area {
    id   Int    @id @map("GauID")
    name String @unique @map("GauName") @db.VarChar(36)

    @@map("Gau")
}

model BaseDeposit {
    listId  Int @map("ListenID")
    classId Int @map("KlassenID")
    fee     Int @map("KostenGrundeinlage")

    startList StartList @relation(fields: [listId], references: [id], onDelete: Cascade)
    class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

    @@id([listId, classId])
    @@index([classId])
    @@map("Grundeinlagenkosten")
}

model Group {
    id   Int    @id @map("GruppenID")
    name String @unique @map("GruppenName") @db.VarChar(36)

    groupFilters     FilterGroup[]
    startListEntries StartListEntry[]

    @@map("Gruppe")
}

model HandiCap {
    evaluationId    Int @map("AuswertungsID")
    disciplineId    Int @map("DzplID")
    priceShootingId Int @map("PreisscheibenID")
    operation       Int @map("Rechenart")
    value           Int @map("Wert") @db.SmallInt

    evaluation    Evaluation    @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
    discipline    Discipline    @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
    priceShooting PriceShooting @relation(fields: [priceShootingId], references: [id], onDelete: Cascade)

    @@id([evaluationId, disciplineId, priceShootingId])
    @@index([disciplineId])
    @@index([priceShootingId])
    @@map("Handicap")
}

model Class {
    id     Int    @id @map("KlassenID")
    name   String @unique @map("KlassenName") @db.VarChar(36)
    minAge Int    @map("minAlter")
    maxAge Int    @map("maxAlter")
    gender Gender @map("Geschlecht")

    accounting           Accounting[]
    classFilters         FilterClass[]
    baseDeposit          BaseDeposit[]
    priceShootingClasses PriceShootingClass[]
    startListEntries     StartListEntry[]
    startListClasses     StartListClass[]

    @@map("Klasse")
}

model Country {
    short       String @id @map("LandesKuerzel") @db.VarChar(3)
    germanName  String @map("LandesName_de") @db.VarChar(36)
    englishName String @map("LandesName_en") @db.VarChar(36)
    frenchName  String @map("LandesName_fr") @db.VarChar(36)
    flag        Bytes? @map("LandesFlagge") @db.MediumBlob

    recordsCountry Record[]  @relation("Rekord_RekordLandToLand")
    recordsNation  Record[]  @relation("Rekord_RekordNationToLand")
    shooters       Shooter[]

    @@map("Land")
}

model Team {
    id     Int    @id @map("MannschaftsID")
    name   String @unique @map("MannschaftsName") @db.VarChar(36)
    clubId Int    @map("VereinsID")

    filterClubs      FilterClub[]
    club             Club             @relation(fields: [clubId], references: [id])
    seedingLists     SeedingList[]
    startListEntries StartListEntry[]
    FilterTeam       FilterTeam[]

    @@index([clubId])
    @@map("Mannschaft")
}

model Staff {
    id        Int    @id @map("PersonalID")
    lastName  String @map("Nachname") @db.VarChar(36)
    firstName String @map("Vorname") @db.VarChar(36)
    userName  String @unique @map("Benutzername") @db.VarChar(36)
    password  String @map("Passwort") @db.VarChar(72)
    rights    Int    @map("Berechtigung")

    accounting Accounting[]

    @@map("Personal")
}

model PriceList {
    evaluationId  Int    @map("AuswertungsID")
    place         Int    @map("Platz")
    cash          Int    @map("Geldpreis")
    materialPrice String @map("Sachpreis") @db.VarChar(72)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, place])
    @@map("Preisliste")
}

model PriceShooting {
    id               Int    @id @map("PreisscheibenID")
    listId           Int    @map("ListenID")
    disciplineId     Int    @map("DzplID")
    name             String @map("Aliasname") @db.VarChar(36)
    color            String @map("Spiegelfarbe") @db.VarChar(7)
    baseCost         Int    @map("Grundeinlage")
    maxPurchase      Int    @map("MaxNachkauf")
    purchaseCost     Int    @map("KostenNachkauf")
    alternativeGroup Int    @map("Alternativgruppe")
    flags            Int    @map("PreisscheibenFlags")

    accounting           Accounting[]
    filterPriceShootings FilterPriceShooting[]
    handiCaps            HandiCap[]
    startList            StartList             @relation(fields: [listId], references: [id], onDelete: Cascade)
    discipline           Discipline            @relation(fields: [disciplineId], references: [id])
    classes              PriceShootingClass[]
    targetData           TargetData[]

    @@unique([listId, name])
    @@index([disciplineId])
    @@map("Preisscheiben")
}

model PriceShootingClass {
    priceShootingId Int @map("PreisscheibenID")
    classId         Int @map("KlassenID")

    priceShooting PriceShooting @relation(fields: [priceShootingId], references: [id], onDelete: Cascade)
    class         Class         @relation(fields: [classId], references: [id], onDelete: Cascade)

    @@id([priceShootingId, classId])
    @@index([classId])
    @@map("PreisscheibenKlassen")
}

model PrinterSettings {
    name   String @id @map("PrinterName") @db.VarChar(72)
    scaleX Float  @map("HScaleFactor") @db.Float
    scaleY Float  @map("VScaleFactor") @db.Float
}

model RankList {
    id   Int    @id @map("RanglistenID")
    name String @unique @map("RanglistenName") @db.VarChar(36)

    filterRankLists  FilterRankList[]
    startListEntries StartListEntry[]

    @@map("Rangliste")
}

model Record {
    id           Int      @id @map("RekordID")
    disciplineId Int      @map("DzplID")
    type         Int      @map("RekordTyp")
    mode         Int      @map("RekordModus")
    result       Int      @map("RekordErgebnis")
    unit         Int      @map("RekordEinheit")
    holder       String?  @map("RekordInhaber") @db.VarChar(256)
    nationShort  String   @map("RekordNation") @db.VarChar(3)
    date         DateTime @map("RekordDatum") @db.Date
    event        Int      @map("RekordVeranstaltung")
    place        String   @map("RekordOrt") @db.VarChar(72)
    countryShort String   @map("RekordLand") @db.VarChar(3)

    discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
    country    Country    @relation("Rekord_RekordNationToLand", fields: [countryShort], references: [short])
    nation     Country    @relation("Rekord_RekordLandToLand", fields: [nationShort], references: [short])

    @@index([disciplineId])
    @@index([countryShort])
    @@index([nationShort])
    @@map("Rekord")
}

model Revision {
    evaluationId Int      @map("AuswertungsID")
    id           Int      @map("RevisionsID")
    timeStamp    DateTime @map("Zeitstempel") @db.DateTime(0)
    state        Int      @map("ErgebnisStatus")
    protestUntil DateTime @map("ProtestzeitBis") @db.DateTime(0)
    comment      String   @map("Kommentar") @db.VarChar(72)
    data         Bytes?   @map("RevisionsDaten") @db.MediumBlob
    flags        Int      @map("RevisionsFlags")

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, id])
    @@map("Revision")
}

model Ring {
    layoutId Int @map("ScheiBesID")
    id       Int @map("RingIdx") @db.TinyInt
    diameter Int @map("Ringdurchmesser") @db.SmallInt
    value    Int @map("Wert") @db.SmallInt

    layout Layout @relation(fields: [layoutId], references: [id], onDelete: Cascade)

    @@id([layoutId, id])
    @@map("Ringe")
}

model Layout {
    id       Int    @id @map("ScheiBesID")
    name     String @map("ScheiBesTitel") @db.VarChar(36)
    diameter Int    @map("Spiegel") @db.SmallInt
    innerTen Int    @map("Innenzehner") @db.SmallInt
    funcId   Int    @map("Funktionsindex") @db.TinyInt

    rounds Round[]
    rings  Ring[]

    @@map("Scheibenbeschreibung")
}

model TargetData {
    id              Int      @id @map("ScheibenID")
    listId          Int      @map("ListenID")
    startId         Int      @map("StartID")
    disciplineId    Int      @map("DzplID")
    priceShootingId Int      @map("PreisscheibenID")
    rangeId         Int      @map("StandNr")
    hitCount        Int      @map("Trefferzahl")
    timeStamp       DateTime @map("Zeitstempel") @db.DateTime(0)
    timeStamp_us    BigInt   @map("Zeitstempel_us")
    emblem          Int      @map("Emblem")
    version         Int      @map("Version")
    flags           Int      @map("ScheibenFlags")
    data            Bytes    @map("Mc5TargetData") @db.MediumBlob

    startListEntry StartListEntry @relation(fields: [listId, startId], references: [listId, startId], onDelete: Cascade)
    discipline     Discipline     @relation(fields: [disciplineId], references: [id])
    priceShooting  PriceShooting  @relation(fields: [priceShootingId], references: [id])

    @@index([disciplineId])
    @@index([listId, startId])
    @@index([priceShootingId])
    @@map("Scheibendaten")
}

model Shooter {
    id          BigInt   @id @map("SportpassID")
    clubId      Int      @map("VereinsID")
    lastName    String   @map("Nachname") @db.VarChar(36)
    firstName   String   @map("Vorname") @db.VarChar(36)
    gender      Gender   @map("Geschlecht")
    birthDate   DateTime @map("Geburtsdatum") @db.Date
    nationShort String   @map("LandesKuerzel") @db.VarChar(3)
    street      String   @map("Strasse") @db.VarChar(72)
    zip         String   @map("PLZ") @db.VarChar(10)
    city        String   @map("Ort") @db.VarChar(36)
    phone       String   @map("Telefonnummer") @db.VarChar(36)
    email       String   @map("EMail") @db.VarChar(72) // length 72 since Ver. 64, but 36 can still be read using this schema
    IBAN        String   @map("IBAN") @db.VarChar(34)
    BIC         String   @map("BIC") @db.VarChar(11)
    flags       Int      @map("SchuetzenFlags")
    image       Bytes?   @map("SchuetzenFoto") @db.MediumBlob

    shooterFilters FilterShooter[]
    club           Club               @relation(fields: [clubId], references: [id])
    nation         Country            @relation(fields: [nationShort], references: [short])
    seedingLists   SeedingList[]
    startListEntry StartListEntry[]
    clubShooters   Vereinszuordnung[]

    @@index([nationShort])
    @@index([lastName])
    @@index([clubId])
    @@map("Schuetze")
}

model SeedingList {
    teamId    Int    @map("MannschaftsID")
    position  Int    @map("Position") @db.TinyInt
    shooterId BigInt @map("SportpassID")

    team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
    shooter Shooter @relation(fields: [shooterId], references: [id], onDelete: Cascade)

    @@id([teamId, position, shooterId])
    @@index([shooterId])
    @@map("Setzliste")
}

model StartListEntry {
    listId        Int      @map("ListenID")
    startId       Int      @map("StartID")
    backNo        Int      @map("RueckenNr")
    startTime     DateTime @map("Startzeit") @db.DateTime(0)
    rangeId       Int      @map("StandNr")
    finalRangeId  String   @map("FinalStandNr") @db.VarChar(3)
    shooterId     BigInt   @map("SportpassID")
    teamId        Int      @map("MannschaftsID")
    clubId        Int      @map("VereinsID")
    unionId       Int      @map("VerbandsID")
    classId       Int      @map("KlassenID")
    disciplineId  Int      @map("DzplID")
    rankListId    Int      @map("RanglistenID")
    qualification Int      @map("Vorkampf") @db.SmallInt
    result        Int      @map("Meldeergebnis") @db.SmallInt
    groupId       Int      @map("GruppenID")
    flags         Int      @map("StarterFlags")
    timeStamp     DateTime @map("Erfasst") @db.DateTime(0)

    accounting Accounting[]
    targetData TargetData[]
    startList  StartList    @relation(fields: [listId], references: [id])
    shooter    Shooter      @relation(fields: [shooterId], references: [id])
    team       Team         @relation(fields: [teamId], references: [id])
    club       Club         @relation(fields: [clubId], references: [id])
    rankList   RankList     @relation(fields: [rankListId], references: [id])
    union      Union        @relation(fields: [unionId], references: [id])
    class      Class        @relation(fields: [classId], references: [id])
    discipline Discipline   @relation(fields: [disciplineId], references: [id])
    group      Group        @relation(fields: [groupId], references: [id])

    @@id([listId, startId])
    @@index([disciplineId])
    @@index([groupId])
    @@index([classId])
    @@index([teamId])
    @@index([rankListId])
    @@index([shooterId])
    @@index([unionId])
    @@index([clubId])
    @@map("Starterliste")
}

model StartList {
    id             Int            @id @map("ListenID")
    name           String         @unique() @map("ListenName") @db.VarChar(36)
    type           StartListTypes @map("ListenTyp")
    eventName      String         @map("VeranstaltungsName") @db.VarChar(36)
    subTitle       String         @map("Untertitel") @db.VarChar(36)
    startDate      DateTime       @map("DatumStart") @db.Date
    endDate        DateTime       @map("DatumEnde") @db.Date
    location       String         @map("Ort") @db.VarChar(36)
    startrangeId   Int            @map("StandbereichStart") @db.SmallInt
    endrangeId     Int            @map("StandbereichEnde") @db.SmallInt
    flags          Int            @map("StarterlistenFlags")
    startInfoText  String         @map("StartInfoText") @db.VarChar(1024)
    resultInfoText String         @map("ResultInfoText") @db.VarChar(1024)
    icon           Bytes?         @map("VeranstaltungsLogo") @db.MediumBlob
    sponsorIcon    Bytes?         @map("SponsorenLogo") @db.MediumBlob

    evaluations      Evaluation[]
    startListFilters FilterStartList[]
    baseDeposits     BaseDeposit[]
    priceShootings   PriceShooting[]
    startListEntries StartListEntry[]
    startListClasses StartListClass[]

    @@map("Starterlisten")
}

model StartListClass {
    listId  Int @map("ListenID")
    classId Int @map("KlassenID")

    startList StartList @relation(fields: [listId], references: [id], onDelete: Cascade)
    class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

    @@id([listId, classId])
    @@index([classId])
    @@map("StarterlistenKlassen")
}

model CertificateText {
    evaluationId Int    @map("AuswertungsID")
    id           Int    @map("UrkundenTextID")
    text         String @map("UrkundenText") @db.VarChar(72)

    evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    @@id([evaluationId, id])
    @@map("Urkundentexte")
}

model Union {
    id    Int    @id @map("VerbandsID")
    name  String @unique() @map("VerbandsName") @db.VarChar(36)
    short String @map("VerbandsKuerzel") @db.VarChar(36)
    icon  Bytes? @map("VerbandsLogo") @db.MediumBlob

    unionFilters     FilterUnion[]
    startListEntries StartListEntry[]
    clubs            Club[]

    @@map("Verband")
}

model Club {
    id      Int    @id @map("VereinsID")
    name    String @map("VereinsName") @db.VarChar(36)
    unionId Int    @map("VerbandsID")
    icon    Bytes? @map("VereinsLogo") @db.MediumBlob

    ClubFilters      FilterClub[]
    teams            Team[]
    shooters         Shooter[]
    startListEntries StartListEntry[]
    union            Union              @relation(fields: [unionId], references: [id])
    clubShooter      Vereinszuordnung[]

    @@index([unionId])
    @@map("Verein")
}

model Vereinszuordnung {
    shooterId BigInt @map("SportpassID")
    clubId    Int    @map("VereinsID")

    shooter Shooter @relation(fields: [shooterId], references: [id], onDelete: Cascade)
    club    Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)

    @@id([shooterId, clubId])
    @@index([clubId])
    @@map("Vereinszuordnung")
}

// Contains version numbers of the database
model Version {
    Versionsnummer Int

    @@ignore
}

model Zeit {
    disciplineId Int @map("DzplID")
    timeId       Int @map("ZeitIdx") @db.TinyInt
    time         Int @map("Zeit")

    discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)

    @@id([disciplineId, timeId])
    @@map("Zeit")
}

enum StartListTypes {
    default       @map("Standard")
    priceShooting @map("PriceShooting")
    league        @map("Liga")
    roundRobin    @map("RWK")
    final         @map("Final")
}

enum Gender {
    female  @map("weiblich")
    male    @map("maennlich")
    unknown @map("neutral")
}

enum TicketType {
    base     @map("Grundeinlage")
    purchase @map("Nachkauf")
    deposit  @map("Einzahlung")
    payout   @map("Auszahlung")
}

// FuncId for layout
// Can't be used, because the values are integers, but prisma expects strings

enum LayoutFunctions {
    innerEdge     @map("0")
    outerEdge     @map("11")
    center        @map("1")
    runningTarget @map("3")
    djv_wild      @map("13")
    custom        @map("12")
}
